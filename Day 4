You are given an m x n integer matrix matrix with the following two properties:

Each row is sorted in non-decreasing order.
The first integer of each row is greater than the last integer of the previous row.
Given an integer target, return true if target is in matrix or false otherwise.







#include <stdio.h>
#include <stdbool.h>

bool searchMatrix(int** , int , int, int); 

int main() 
{
    
    int matrixData[3][4] = 
    {
        {1, 3, 5, 7},
        {10, 11, 16, 20},
        {23, 30, 34, 60}
    };

    int* matrix[3] = {matrixData[0], matrixData[1], matrixData[2]};

    int numRows = 3;
    int numCols = 4;

    
    int target;
    
    printf("please enter a Number that you want to Search in matrix\n");
    scanf("%d",&target);

    
    if (searchMatrix(matrix, numRows, numCols, target)) 
    {
        printf("Target %d is in the matrix.\n", target);
    } else 
    {
        printf("Target %d is not in the matrix.\n", target);
    }

    return 0;
}

bool searchMatrix(int** matrix, int numRows, int numCols, int target) 
{
    
    int left = 0;
    int right = numRows * numCols - 1;

        while (left <= right) {
        int mid = (left + right) / 2;

        int row = mid / numCols;
        int col = mid % numCols;

        int mid_element = matrix[row][col];

        
        if (mid_element == target) 
        {
            return true;
        }
        else if (mid_element < target) 
        {
            left = mid + 1;
        }
        else 
        {
            right = mid - 1;
        }
    }

    return false;
}
